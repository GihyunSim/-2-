% 2개의 주파수 입력
f1 = input('첫 번째 정현파 신호의 주파수를 입력하세요 (f1, Hz): ');
f2 = input('두 번째 정현파 신호의 주파수를 입력하세요 (f2, Hz): ');
T = input('시뮬레이션 시간을 입력하세요 (T, seconds): ');

t = linspace(0, T, 1000);

% f1,f2로부터 참조 입력 생성
A1 = 1; % 첫 번째 신호의 진폭
A2 = 1; % 두 번째 신호의 진폭
ref_input = A1 * sin(2 * pi * f1 * t) + A2 * sin(2 * pi * f2 * t);

% f1,f2의 합성 신호 시각화
figure;
plot(t, ref_input);
xlabel('Time (s)');
ylabel('Amplitude');
title('합성 신호 시각화');
grid on;

% 필터 유형 및 파라미터 입력받기
filter_type = input('사용할 필터 유형을 입력하세요 (BPF, LPF, HPF): ', 's');
omega_0 = input('중심 주파수를 입력하세요 (rad/s): ');
Q = input('Q-factor를 입력하세요: ');

% switch문으로 필터 타입 선택
switch filter_type
    case 'BPF'
        % 대역통과 필터
        num = [1 0];
        den = [1 omega_0/Q omega_0 omega_0^2];
    case 'LPF'
        % 저역통과 필터
        num = [omega_0^2];
        den = [1 omega_0/Q omega_0 omega_0^2];
    case 'HPF'
        % 고역통과 필터
        num = [1 0 0];
        den = [1 omega_0/Q omega_0 omega_0^2];
    otherwise
        error('올바른 필터 유형을 입력하세요 (BPF, LPF, HPF).');
end

% switch문으로 입력된 num,den 값을 Ga(필터 전달함수)에 저장
Ga = tf(num, den);

% 참조 입력 필터링
[filtered_ref, t_filtered] = lsim(Ga, ref_input, t);

% 필터링된 참조 입력 시각화 (필터가 입력 신호에 미치는 영향을 확인하기 위해) 0으로 나오면 이상 없음.
figure;
plot(t, ref_input, 'b', 'DisplayName', '기존 참조 입력');
hold on;
plot(t_filtered, filtered_ref, 'r', 'DisplayName', '필터링된 참조 입력');
xlabel('Time (s)');
ylabel('Amplitude');
title('필터링된 다중주파수 참조 입력');
legend;
grid on;

% Plant 전달함수 입력 Ex) [1 0] 꼴로 입력
numerator = input('Plant의 분자 계수를 입력하세요 (벡터 형식으로): ');
denominator = input('Plant의 분모 계수를 입력하세요 (벡터 형식으로): ');

% Plant 전달함수 생성
plant = tf(numerator, denominator);

% Plant에 필터링된 참조 입력 적용 및 응답 시뮬레이션
[y, t_sys] = lsim(plant, filtered_ref, t_filtered);

% Plant 응답 시각화
figure;
plot(t_sys, y, 'g', 'DisplayName', 'Plant Response');
xlabel('Time (s)');
ylabel('Amplitude');
title('필터링된 다중주파수 입력이 들어간 plant 응답');
legend;
grid on;
